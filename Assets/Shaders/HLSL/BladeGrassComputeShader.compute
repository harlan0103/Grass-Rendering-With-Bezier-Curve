// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel UpdateArgsBuffer

#include "Simplex.compute"

struct Blade
{
    float3 position;
    float windOffset;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
AppendStructuredBuffer<Blade> _BladeGrassBuffer;
RWStructuredBuffer<uint> _BladeGrassCntBuffer;
RWStructuredBuffer<uint> _BladeGrassArgsBuffer;

uint _MeshInsanceIndex;

float3 _CamPosInWorldSpace;
float _DistanceCullingThreshold;
uint _Dimension;
float2 _PlacementOffset;
float3 _InitialPos;
float4x4 _CamClippingMatrix;
float _NearPlaneOffset;
float _EdgeFrustumCullingOffset;
float4 _Time;
float _HeightMultiplier;
float _HeightMapSize;

// Occlusion Culling
uint _DepthTexSize;
float _OccludHeightOffset;

Texture2D WindTex;
SamplerState samplerWindTex;

Texture2D HeightTex;
SamplerState samplerHeightTex;

Texture2D DepthTex;
SamplerState samplerDepthTex;

float Clamp(float min, float max, float target)
{
    if (target < min)
    {
        return min;
    }
    else if (target > max)
    {
        return max;
    }
    return target;
}

uint DistanceCulling(float3 worldPos)
{
    // Get the world position of current grass instance
    // Get the world position of main camera
    // Calculate the distance between two positions
    // Cull if distance exeeds the threshold
    
    float d = distance(worldPos, _CamPosInWorldSpace);
    
    if (d <= _DistanceCullingThreshold)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

uint FrustumCulling(float4 clippingPos)
{
    // The size of clipping space is about [-clippingPos.w, clippingPos.w]
    // Only need to check if x y z values are inside the range
    
    bool isOutsideFarNearPlane = clippingPos.z > clippingPos.w || clippingPos.z < -clippingPos.w;
    bool isOutsideLeftRightPlane = clippingPos.x < -clippingPos.w + _EdgeFrustumCullingOffset || clippingPos.x > clippingPos.w - _EdgeFrustumCullingOffset;
    bool isOutsideBottomTopPlane = clippingPos.y < -clippingPos.w + -_NearPlaneOffset || clippingPos.y > clippingPos.w;

    if (isOutsideFarNearPlane || isOutsideLeftRightPlane || isOutsideBottomTopPlane)
    {
        return 0; // The point is outside the frustum
    }
    else
    {
        return 1; // The point is inside the frustum
    }
}

uint OcclusionCulling(float4 clippingPos)
{
    // Transfer grass position from clipping to NDC
    float3 ndcPosition = clippingPos.xyz / clippingPos.w;
    
    // Transfer to uv coordinate
    float2 uvPosition = float2(ndcPosition.x, ndcPosition.y) * 0.5f + 0.5f;
    
    // Use maximum mipmap level
    uint mipmapLevel = log2(_DepthTexSize) - 1;
    uint size = _DepthTexSize / (1 << mipmapLevel);
    
    // Calculate the pixel position
    uint2 pixelPosition = uint2(clamp(uvPosition.x * size, 0, size - 1), clamp(uvPosition.y * size, 0, size - 1));
    
    // Sample the depth in depth texture
    float depthInTexture = DepthTex.SampleLevel(samplerDepthTex, uvPosition, 0).r;

    float depth = ndcPosition.z;
    
    if (depth > depthInTexture)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _Dimension || id.y >= _Dimension)
    {
        return;
    }
    
    float randomOffset = Clamp(0.0, 0.99, (snoise(id) * 0.3));

    float spawnX = (id.x / _PlacementOffset.x) + randomOffset;
    float spawnZ = (id.y / _PlacementOffset.y) + randomOffset;

    float3 finalPos = float3(spawnX, 0.0f, spawnZ);
    float3 revisedPos = _InitialPos + finalPos;
    uint distanceCulling = DistanceCulling(revisedPos);
    
    float2 worldUV = float2(spawnX, spawnZ);
    float2 heightMapUV = worldUV * (1 / _HeightMapSize);
    clamp(0.0, 1.0, heightMapUV.x);
    clamp(0.0, 1.0, heightMapUV.y);
    
    // Sample the height value
    float heightOffset = HeightTex.SampleLevel(samplerHeightTex, heightMapUV, 0).x;
    revisedPos.y += heightOffset * _HeightMultiplier;
    
    // Calculate for frustum culling
    float4 clippingSpacePos = mul(_CamClippingMatrix, float4(revisedPos, 1.0));
    uint frustumCulling = FrustumCulling(clippingSpacePos);
    
    // Perform the occulusion culling
    uint positionOcclusionTest = OcclusionCulling(clippingSpacePos);
    
    // Only use the balde grass generated location to check depth value will let some artifacts
    // Espically for the edge of the occluder
    // So add a second check using a simulated height value
    float4 clippingSpacePosHeight = mul(_CamClippingMatrix, float4(revisedPos.x, revisedPos.y + _OccludHeightOffset, revisedPos.z, 1.0));
    uint heightOcclusionTest = OcclusionCulling(clippingSpacePosHeight);
    
    uint occlusionCulling = positionOcclusionTest || heightOcclusionTest;

    if (distanceCulling == 1 && frustumCulling == 1 && occlusionCulling == 1)
    {
        
        // Sample wind using timed UV coordinate
        float2 sampleUV = worldUV + _Time.y * 0.12f;
        
        float windOffset = WindTex.SampleLevel(samplerWindTex, sampleUV, 0).x;
        
        Blade blade;
        blade.position = revisedPos;
        blade.windOffset = windOffset;
        
        _BladeGrassBuffer.Append(blade);
        InterlockedAdd(_BladeGrassCntBuffer[0], 1);
    }
}

[numthreads(1, 1, 1)]
void UpdateArgsBuffer(uint3 id : SV_DispatchThreadID)
{
    _BladeGrassArgsBuffer[0] = _MeshInsanceIndex;
    _BladeGrassArgsBuffer[1] = _BladeGrassCntBuffer[0];
    _BladeGrassArgsBuffer[2] = 0;
    _BladeGrassArgsBuffer[3] = 0;
    _BladeGrassArgsBuffer[4] = 0;
}
